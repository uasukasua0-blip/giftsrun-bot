"""
GiftsRun clone - Telegram bot (example)
---
Instructions:
1) Replace BOT_TOKEN and ADMIN_ID with your values.
2) Install dependencies: pip install pyTelegramBotAPI
3) Run: python giftsrun_clone_bot.py

This is a template implementing:
- /start with optional referral (t.me/yourbot?start=<ref_id>)
- SQLite storage for users and referrals
- simple gift-claim flow with cooldown
- admin commands: /stats, /broadcast, /addgift, /setcooldown
- inline keyboards
- basic error handling and logging

Use and adapt freely. Do NOT impersonate real services. This template is educational.
"""

import os
import time
import sqlite3
import logging
from datetime import datetime, timedelta
from typing import Optional

import telebot
from telebot import types

import os
BOT_TOKEN = os.getenv("7268301814:AAEx-jYb_9_Npi2KNL5kJLR9OvqMBWmQOz0")
ADMIN_ID = int(os.getenv("8409202502", "0"))

# -------------------- SETUP --------------------
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# Ensure DB exists
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()

def init_db():
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        tg_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        created_at TEXT
    )""")

    cur.execute("""
    CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY,
        referrer_tg_id INTEGER,
        referred_tg_id INTEGER,
        created_at TEXT
    )""")

    cur.execute("""
    CREATE TABLE IF NOT EXISTS gifts (
        id INTEGER PRIMARY KEY,
        title TEXT,
        data TEXT,
        active INTEGER DEFAULT 1
    )""")

    cur.execute("""
    CREATE TABLE IF NOT EXISTS claims (
        id INTEGER PRIMARY KEY,
        tg_id INTEGER,
        gift_id INTEGER,
        claimed_at TEXT
    )""")

    conn.commit()

init_db()

# -------------------- HELPERS --------------------

def add_user(tg_user) -> None:
    now = datetime.utcnow().isoformat()
    try:
        cur.execute(
            "INSERT OR IGNORE INTO users (tg_id, username, first_name, last_name, created_at) VALUES (?, ?, ?, ?, ?)",
            (tg_user.id, tg_user.username, tg_user.first_name, tg_user.last_name, now),
        )
        conn.commit()
    except Exception as e:
        logging.exception("add_user error: %s", e)


def add_referral(referrer_id: int, referred_id: int) -> None:
    now = datetime.utcnow().isoformat()
    try:
        # avoid duplicate referral
        cur.execute(
            "SELECT 1 FROM referrals WHERE referrer_tg_id=? AND referred_tg_id=?",
            (referrer_id, referred_id),
        )
        if cur.fetchone():
            return
        cur.execute(
            "INSERT INTO referrals (referrer_tg_id, referred_tg_id, created_at) VALUES (?, ?, ?)",
            (referrer_id, referred_id, now),
        )
        conn.commit()
    except Exception as e:
        logging.exception("add_referral error: %s", e)


def can_claim(tg_id: int) -> bool:
    cur.execute("SELECT claimed_at FROM claims WHERE tg_id=? ORDER BY claimed_at DESC LIMIT 1", (tg_id,))
    row = cur.fetchone()
    if not row:
        return True
    last_claim = datetime.fromisoformat(row[0])
    return datetime.utcnow() - last_claim >= timedelta(hours=CLAIM_COOLDOWN_HOURS)


def record_claim(tg_id: int, gift_id: int) -> None:
    now = datetime.utcnow().isoformat()
    cur.execute("INSERT INTO claims (tg_id, gift_id, claimed_at) VALUES (?, ?, ?)", (tg_id, gift_id, now))
    conn.commit()


def get_active_gift() -> Optional[dict]:
    cur.execute("SELECT id, title, data FROM gifts WHERE active=1 ORDER BY id DESC LIMIT 1")
    row = cur.fetchone()
    if not row:
        return None
    return {"id": row[0], "title": row[1], "data": row[2]}

# -------------------- COMMANDS --------------------

@bot.message_handler(commands=["start"])
def start_handler(message: types.Message):
    add_user(message.from_user)

    # handle referral: /start <referrer_tg_id>
    args = message.text.split()
    if len(args) > 1:
        ref = args[1]
        try:
            ref_id = int(ref)
            if ref_id != message.from_user.id:
                add_referral(ref_id, message.from_user.id)
        except ValueError:
            pass

    kb = types.InlineKeyboardMarkup()
    gift = get_active_gift()
    if gift:
        kb.add(types.InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ üéÅ", callback_data=f"claim:{gift['id']}"))
    kb.add(types.InlineKeyboardButton(text="–ú—ñ–π —Ä–µ—Ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è üîó", callback_data="referral"))
    kb.add(types.InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ / help üõ†", callback_data="help"))

    text = (
        f"–í—ñ—Ç–∞—é, <b>{message.from_user.first_name or '–¥—Ä—É–≥'}</b>!\n"
        "–¶–µ –∫–ª–æ–Ω-–±–æ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.\n"
        "–©–æ–± –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤ ‚Äî –Ω–∞–¥—ñ—à–ª–∏ —ó–º —Ç–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
    )
    bot.send_message(message.chat.id, text, reply_markup=kb)


@bot.callback_query_handler(func=lambda c: True)
def callback_query(c: types.CallbackQuery):
    try:
        data = c.data
        if data == "referral":
            tg_id = c.from_user.id
            link = f"https://t.me/{bot.get_me().username}?start={tg_id}"
            bot.answer_callback_query(c.id, "–†–µ—Ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            bot.send_message(c.from_user.id, f"–¢–≤–æ—î —Ä–µ—Ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{link}")
            return

        if data == "help":
            bot.answer_callback_query(c.id)
            bot.send_message(c.from_user.id, "–ö–æ–º–∞–Ω–¥–∏: /start, /help. –ê–¥–º—ñ–Ω: /stats, /broadcast <text>")
            return

        if data.startswith("claim:"):
            _, gift_id_s = data.split(":", 1)
            try:
                gift_id = int(gift_id_s)
            except ValueError:
                bot.answer_callback_query(c.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫")
                return

            if not can_claim(c.from_user.id):
                bot.answer_callback_query(c.id, "–í–∏ –≤–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return

            # get gift info
            cur.execute("SELECT title, data FROM gifts WHERE id=? AND active=1", (gift_id,))
            row = cur.fetchone()
            if not row:
                bot.answer_callback_query(c.id, "–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            title, data = row
            # send gift ‚Äî here we just send text; adapt to real gift logic
            bot.send_message(c.from_user.id, f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: <b>{title}</b>\n{data}")
            record_claim(c.from_user.id, gift_id)
            bot.answer_callback_query(c.id, "–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            return

        bot.answer_callback_query(c.id)
    except Exception as e:
        logging.exception("callback error: %s", e)
        try:
            bot.answer_callback_query(c.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
        except Exception:
            pass


# -------------------- ADMIN COMMANDS --------------------

def admin_only(func):
    def wrapper(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            bot.reply_to(message, "–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É")
            return
        return func(message)
    return wrapper


@bot.message_handler(commands=["stats"])
@admin_only
def stats_command(message: types.Message):
    cur.execute("SELECT COUNT(*) FROM users")
    users_count = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM referrals")
    refs_count = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM claims")
    claims_count = cur.fetchone()[0]

    text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n–†–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {refs_count}\n–í–∏–¥–∞—á –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤: {claims_count}"
    bot.reply_to(message, text)


@bot.message_handler(commands=["broadcast"])
@admin_only
def broadcast_command(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast –¢–ï–ö–°–¢")
        return
    text = parts[1]
    cur.execute("SELECT tg_id FROM users")
    rows = cur.fetchall()
    sent = 0
    for (tg_id,) in rows:
        try:
            bot.send_message(tg_id, text)
            sent += 1
            time.sleep(0.05)
        except Exception:
            pass
    bot.reply_to(message, f"–†–æ–∑—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {sent}")


@bot.message_handler(commands=["addgift"])
@admin_only
def addgift_command(message: types.Message):
    # format: /addgift –ù–∞–∑–≤–∞ | –î–∞–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∞
    try:
        payload = message.text.partition(' ')[2]
        name, sep, data = payload.partition('|')
        name = name.strip()
        data = data.strip()
        if not name:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /addgift –ù–∞–∑–≤–∞ | –î–∞–Ω—ñ")
            return
        cur.execute("INSERT INTO gifts (title, data, active) VALUES (?, ?, 1)", (name, data))
        conn.commit()
        bot.reply_to(message, "–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–æ–¥–∞–Ω–æ")
    except Exception as e:
        logging.exception("addgift err: %s", e)
        bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ")


@bot.message_handler(commands=["setcooldown"])
@admin_only
def setcooldown_command(message: types.Message):
    global CLAIM_COOLDOWN_HOURS
    try:
        val = int(message.text.split(maxsplit=1)[1])
        CLAIM_COOLDOWN_HOURS = val
        bot.reply_to(message, f"Cooldown –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {val} –≥–æ–¥–∏–Ω")
    except Exception:
        bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setcooldown <–≥–æ–¥–∏–Ω>")


# -------------------- FALLBACK / TEXT HANDLER --------------------
@bot.message_handler(func=lambda m: True)
def any_message(m: types.Message):
    # Simple echo/help
    text = (
        "–Ø –±–æ—Ç-–∫–ª–æ–Ω. –ö–Ω–æ–ø–∫–∏: /start.\n"
        "–Ø–∫—â–æ –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats /broadcast /addgift"
    )
    bot.send_message(m.chat.id, text)


# -------------------- RUN --------------------
if __name__ == '__main__':
    logging.info("Bot started")
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        logging.info("Bot stopped by keyboard")
    except Exception as e:
        logging.exception("Bot crashed: %s", e)

